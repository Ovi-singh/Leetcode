FIBONACCI

class Solution {
public:
    int fib(int n) {
        vector<long int> v(n+1,0); //for memoization
        if(n==0) return 0;
        if(n==1) return 1;
        if(n>1){
        for(int i = 2; i <=n;i++){
            v[0]= 0;
            v[1] =1;
            v[i] = v[i-1] + v[i-2];
            //storing values so that we dont have to solve again
        }
        }
    return v.back();
    }
};

//time complexity is reduced but space complexity can still be optimized . you can use 3 variables : a,b,c to keep track of previous and currently calculating value. 


-------------------------------------------------------------------

TRIBONACCI


class Solution {
public:
    int tribonacci(int n) {
        if(n==0) return 0;
        if(n==1 || n==2) return 1;
       
        vector<int> arr(n+1,0);
        arr[0] = 0; 
        arr[1] = 1;
        arr[2] = 1;
        for(int i = 3 ; i <=n;i++){
            arr[i]=arr[i-1] + arr[i-2]+arr[i-3];
        }
        return arr.back();
    }
};



-------------------------------------------------------------------------



A less optimal approach for both would be just recursion . 

class Solution {
public:
    int fib(int n) {
        // Base cases: fib(0) = 0, fib(1) = 1
        if (n == 0) return 0;
        if (n == 1) return 1;
        
        // Recursive relation: fib(n) = fib(n-1) + fib(n-2)
        return fib(n - 1) + fib(n - 2);
    }
};


